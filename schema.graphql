type ApplicationMetadataRegistry {
	id: String!
	version: String!
}

type ApplicationMetadataRegistryConnection {
	items: [ApplicationMetadataRegistry]
	nextToken: String
}schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type ApplicationMetadataRegistry {
  id: String!
  version: String!
}

type ApplicationMetadataRegistryConnection {
  items: [ApplicationMetadataRegistry]
  nextToken: String
}

type Mutation {
  createApplicationMetadataRegistry(input: CreateApplicationMetadataRegistryInput!): ApplicationMetadataRegistry
  deleteApplicationMetadataRegistry(input: DeleteApplicationMetadataRegistryInput!): ApplicationMetadataRegistry
  updateApplicationMetadataRegistry(input: UpdateApplicationMetadataRegistryInput!): ApplicationMetadataRegistry
}

type Query {
  getApplicationMetadataRegistry(id: String!, version: String!): ApplicationMetadataRegistry
  listApplicationMetadataRegistries(filter: TableApplicationMetadataRegistryFilterInput, limit: Int, nextToken: String): ApplicationMetadataRegistryConnection
}

type Subscription {
  onCreateApplicationMetadataRegistry(id: String, version: String): ApplicationMetadataRegistry @aws_subscribe(mutations : ["createApplicationMetadataRegistry"])
  onDeleteApplicationMetadataRegistry(id: String, version: String): ApplicationMetadataRegistry @aws_subscribe(mutations : ["deleteApplicationMetadataRegistry"])
  onUpdateApplicationMetadataRegistry(id: String, version: String): ApplicationMetadataRegistry @aws_subscribe(mutations : ["updateApplicationMetadataRegistry"])
}

input CreateApplicationMetadataRegistryInput {
  id: String!
  version: String!
}

input DeleteApplicationMetadataRegistryInput {
  id: String!
  version: String!
}

input TableApplicationMetadataRegistryFilterInput {
  id: TableStringFilterInput
  version: TableStringFilterInput
}

input TableBooleanFilterInput {
  eq: Boolean
  ne: Boolean
}

input TableFloatFilterInput {
  between: [Float]
  contains: Float
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: Float
  notContains: Float
}

input TableIDFilterInput {
  beginsWith: ID
  between: [ID]
  contains: ID
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: ID
  notContains: ID
}

input TableIntFilterInput {
  between: [Int]
  contains: Int
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: Int
  notContains: Int
}

input TableStringFilterInput {
  beginsWith: String
  between: [String]
  contains: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String
  notContains: String
}

input UpdateApplicationMetadataRegistryInput {
  id: String!
  version: String!
}


input CreateApplicationMetadataRegistryInput {
	id: String!
	version: String!
}

input DeleteApplicationMetadataRegistryInput {
	id: String!
	version: String!
}

type Mutation {
	createApplicationMetadataRegistry(input: CreateApplicationMetadataRegistryInput!): ApplicationMetadataRegistry
	updateApplicationMetadataRegistry(input: UpdateApplicationMetadataRegistryInput!): ApplicationMetadataRegistry
	deleteApplicationMetadataRegistry(input: DeleteApplicationMetadataRegistryInput!): ApplicationMetadataRegistry
}

type Query {
	getApplicationMetadataRegistry(id: String!, version: String!): ApplicationMetadataRegistry
	listApplicationMetadataRegistries(filter: TableApplicationMetadataRegistryFilterInput, limit: Int, nextToken: String): ApplicationMetadataRegistryConnection
}

type Subscription {
	onCreateApplicationMetadataRegistry(id: String, version: String): ApplicationMetadataRegistry
		@aws_subscribe(mutations: ["createApplicationMetadataRegistry"])
	onUpdateApplicationMetadataRegistry(id: String, version: String): ApplicationMetadataRegistry
		@aws_subscribe(mutations: ["updateApplicationMetadataRegistry"])
	onDeleteApplicationMetadataRegistry(id: String, version: String): ApplicationMetadataRegistry
		@aws_subscribe(mutations: ["deleteApplicationMetadataRegistry"])
}

input TableApplicationMetadataRegistryFilterInput {
	id: TableStringFilterInput
	version: TableStringFilterInput
}

input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input UpdateApplicationMetadataRegistryInput {
	id: String!
	version: String!
}